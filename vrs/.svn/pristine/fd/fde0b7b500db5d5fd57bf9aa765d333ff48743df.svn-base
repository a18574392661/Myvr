package com.bootdo.ts.service.impl;

import com.bootdo.common.utils.R;
import com.bootdo.common.utils.StringUtils;
import com.bootdo.ts.dao.UCidsDao;
import com.bootdo.ts.dao.XjDao;
import com.bootdo.ts.dao.ZwDao;
import com.bootdo.ts.domain.XjDO;
import com.bootdo.ts.domain.ZwDO;
import com.github.pagehelper.PageHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import com.bootdo.ts.dao.CurrlogDao;
import com.bootdo.ts.domain.CurrlogDO;
import com.bootdo.ts.service.CurrlogService;



@Service
public class CurrlogServiceImpl implements CurrlogService {
	@Autowired
	private CurrlogDao currlogDao;

	@Autowired
	private ZwDao zwDao;

	@Autowired
	private XjDao xjDao;

	@Autowired
	private UCidsDao uCidsDao;
	
	@Override
	public CurrlogDO get(Long id){
		return currlogDao.get(id);
	}
	
	@Override
	public List<Map<String, Object>> list(Map<String, Object> map){
		Integer page=1;
		//方法1一
		Map<String,Object> results=new HashMap<>();
		StringBuilder tj=new StringBuilder(",");
		List<XjDO> xjList=xjDao.list(null);
		for (int i = 0; i<xjList.size() ; i++) {
			XjDO xjDOS=xjList.get(i);
			//查询出 当前日期对应的下标
			tj.append("MAX(CASE j.name WHEN "+"'"+xjDOS.getName()+"'"+" THEN  c.cname ELSE null END ) g"+xjList.get(i).getId());
			if (i<xjList.size()-1){
				tj.append(",");
			}
		}
		if (map==null){
			map=new HashMap<>();
		}
		map.put("tj",tj.toString());
		String sj=map.get("page")+"";
		if (!("null".equals(sj))&&null!=sj&&!("".equals(sj))&&sj.length()>0){
			page=Integer.parseInt(sj);

		}
		PageHelper.startPage(page,10);
		List<Map<String,Object>> list2=currlogDao.list2(map);

		List<Map<String,Object>> rs=new ArrayList<Map<String,Object>>();
		List<XjDO> xjDOList=xjDao.list(null);
		//遍历查询出来的行转列
		for (Map<String,Object> r : list2) {
			Map childMap=new LinkedHashMap();
			//循环所有列头
			Map jg=new HashMap();
			jg.put("vs",r.get("daydate"));
			jg.put("colorsty","btn-info");
			childMap.put("预约日期",jg);
			String days=this.getDay(r.get("daydate")+"");
			if (StringUtils.isNotBlank(days)){
				jg.put("days",days);
			}
			Map xq=new LinkedHashMap();
			for (XjDO xjDO : xjDOList) {
				Map jg2=new HashMap();
				//动态课程名字
				jg2.put("vs",r.get("g"+xjDO.getId()));
				if (r.get("g"+xjDO.getId())!=null&&!("null".equals(r.get("g"+xjDO.getId())))){
					jg2.put("jid",xjDO.getId());
					jg2.put("colorsty","btn-success");
					jg2.put("ds",r.get("daydate"));
				}
				else {
					//双击新增拿到当前时间
					jg2.put("sjid",xjDO.getId());
					jg2.put("sdate",r.get("daydate"));
				}

				childMap.put(xjDO.getName(),jg2);
			}

				rs.add(childMap);
		}
		return rs;
	}

	public static void main(String[] args) {
		try {

			SimpleDateFormat myFormatter = new SimpleDateFormat("yyyy-MM-dd");
			Date myDate = myFormatter.parse("2020-5-17");
			SimpleDateFormat formatter = new SimpleDateFormat("E");
			String str = formatter.format(myDate);
			System.out.println(str);
		}
		catch (Exception e){
			e.printStackTrace();
		}
	}

		public  String getDay(String rq){

			String str="";
			try {
				SimpleDateFormat myFormatter = new SimpleDateFormat("yyyy-MM-dd");
				Date myDate = myFormatter.parse(rq);
				SimpleDateFormat formatter = new SimpleDateFormat("E");
				 str = formatter.format(myDate);
			}
			catch (Exception e){
				e.printStackTrace();
			}


	return  str;

		}
	
	@Override
	public int count(Map<String, Object> map){
		return currlogDao.count(map);
	}



	@Override
	public int save(CurrlogDO currlog){
		//查询当天 某节课 是否已经存在
		int c=currlogDao.queryDayJkCount(currlog);
		if (c>0){
			throw  new RuntimeException("该时间此节课已被安排!");
		}
		int count=currlogDao.save(currlog);
		//默认添加 1个座位 是老师预约 可以动态添加等
		for (int i = 1; i <=1 ; i++) {
			ZwDO zwDO=new ZwDO();
			//哪个课程节数对于的座位
			zwDO.setCid(currlog.getId());
			zwDO.setCode("C"+i);
			zwDO.setStatus(1);
			zwDao.save(zwDO);
		}
		return count;
	}
	
	@Override
	public int update(CurrlogDO currlog){
		int c=currlogDao.queryDayJkCount(currlog);
		if (c>0){
			throw  new RuntimeException("该时间此节课已被安排!");

		}

		int count=currlogDao.update(currlog);

		return count;
	}
	
	@Override
	public int remove(Long id){
		return currlogDao.remove(id);
	}
	
	@Override
	public int batchRemove(Long[] ids){
		return currlogDao.batchRemove(ids);
	}

	@Override
	public List<Map<String, Object>> queryDayRq(List dx) {
		//查询表头对应的行权期
		List<Map<String, Object>> resultList=new ArrayList<>();
		List<XjDO> list=xjDao.list(null);//第一节开始

		Date d = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String dqdate=sdf.format(d);

		//有几个查询几个日期
		for (XjDO xjDO : list) {
			int i=1;
			Map<String, Object> result=new LinkedHashMap<>();
			result.put("jname",xjDO.getName());//第几节课
			for (Object dates : dx) {
				String str=dates+"";
				String[]	sz=str.split(" ");
				//星期几
				String ds=sz[0];
				//每天的 第某节课
				//之前的时间不能预约
				int c=compare_date(dqdate,ds);
				CurrlogDO currlogDO=currlogDao.querySJDays(xjDO.getId()+"",ds);
				//查询出第一个座位
				result.put("sty"+i,1);
				if (currlogDO!=null){
				 	ZwDO zwDO=zwDao.querybyCurrlogOne(currlogDO.getId());
					currlogDO.setZwDO(zwDO);
					//判断样式是否被预约
					if (currlogDO.getCname()!=null&&currlogDO.getChecked()!=0){
						result.put("sty"+i,2);
					}

				}else{
					result.put("sty"+i,2);
				}

				//当前时间之前
				if (c>=1){
					result.put("sty"+i,2);
				}
				//第2个以后的格子
				result.put("s"+i,currlogDO);
				i++;
			}
			resultList.add(result);
		}

		return resultList;
	}

	@Override
	public void queryKcCount(String cid) {


		//查询时间是否一致
		CurrlogDO currlogDO=currlogDao.get(Long.parseLong(cid));
		Date d = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String dqdate=sdf.format(d);
		int count=compare_date(dqdate,sdf.format(currlogDO.getDaydate()));
		if (count>=1){
			throw  new RuntimeException("今天之前的课程不能预约!");
		}
		int c=uCidsDao.queryKcCount(cid);

		if (c>0){
			throw  new RuntimeException("此课程已被预约!");
		}


	}


	//版本2 接口 查询这周预约的课程
	public    int compare_date(String DATE1, String DATE2) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		try {
			Date dt1 = df.parse(DATE1);
			Date dt2 = df.parse(DATE2);
			if (dt1.getTime() > dt2.getTime()) {
				System.out.println("dt1 在dt2前");
				return 1;
			} else if (dt1.getTime() < dt2.getTime()) {
				System.out.println("dt1在dt2后");
				return -1;
			} else {
				return 0;
			}
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return 0;
	}

}
